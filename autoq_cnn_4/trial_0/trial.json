{"trial_id": "0", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "conv_0_kernel_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv_1_kernel_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv_2_kernel_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dense_0_kernel_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dense_1_kernel_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "output_dense_kernel_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv_0", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv_act_0_activation_quantizer", "default": "quantized_relu(3,1)", "conditions": [], "values": ["quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,6)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv_1", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv_act_1_activation_quantizer", "default": "quantized_relu(3,1)", "conditions": [], "values": ["quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,6)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv_2", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv_act_2_activation_quantizer", "default": "quantized_relu(3,1)", "conditions": [], "values": ["quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,6)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_dense_0", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dense_act_0_activation_quantizer", "default": "quantized_relu(3,1)", "conditions": [], "values": ["quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,6)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_dense_1", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dense_act_1_activation_quantizer", "default": "quantized_relu(3,1)", "conditions": [], "values": ["quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,6)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "output_dense_bias_quantizer", "default": "quantized_bits(2,0,1,alpha=1.0)", "conditions": [], "values": ["quantized_bits(2,0,1,alpha=1.0)", "quantized_bits(4,0,1,alpha=1.0)", "quantized_bits(6,0,1,alpha=1.0)", "quantized_bits(8,0,1,alpha=1.0)"], "ordered": false}}], "values": {"conv_0_kernel_quantizer": "quantized_bits(6,0,1,alpha=1.0)", "conv_1_kernel_quantizer": "quantized_bits(2,0,1,alpha=1.0)", "conv_2_kernel_quantizer": "quantized_bits(4,0,1,alpha=1.0)", "dense_0_kernel_quantizer": "quantized_bits(4,0,1,alpha=1.0)", "dense_1_kernel_quantizer": "quantized_bits(8,0,1,alpha=1.0)", "output_dense_kernel_quantizer": "quantized_bits(4,0,1,alpha=1.0)", "network_filters_conv_0": 1.0, "conv_act_0_activation_quantizer": "quantized_relu(3,1)", "network_filters_conv_1": 1.0, "conv_act_1_activation_quantizer": "quantized_relu(4,2)", "network_filters_conv_2": 2.0, "conv_act_2_activation_quantizer": "quantized_relu(8,4)", "network_filters_dense_0": 2.0, "dense_act_0_activation_quantizer": "quantized_relu(3,1)", "network_filters_dense_1": 2.0, "dense_act_1_activation_quantizer": "quantized_relu(3,1)", "output_dense_bias_quantizer": "quantized_bits(6,0,1,alpha=1.0)"}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/tmp/__autograph_generated_filegbzni5th.py\", line 15, in tf__train_function\n    retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope)\ntensorflow.python.autograph.pyct.error_utils.MultilineMessageKeyError: in user code:\n\n    File \"/opt/conda/lib/python3.10/site-packages/keras/engine/training.py\", line 1249, in train_function  *\n        return step_function(self, iterator)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/engine/training.py\", line 1233, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/opt/conda/lib/python3.10/site-packages/keras/engine/training.py\", line 1222, in run_step  **\n        outputs = model.train_step(data)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/engine/training.py\", line 1027, in train_step\n        self.optimizer.minimize(loss, self.trainable_variables, tape=tape)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 527, in minimize\n        self.apply_gradients(grads_and_vars)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 1140, in apply_gradients\n        return super().apply_gradients(grads_and_vars, name=name)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 634, in apply_gradients\n        iteration = self._internal_apply_gradients(grads_and_vars)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 1166, in _internal_apply_gradients\n        return tf.__internal__.distribute.interim.maybe_merge_call(\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 1216, in _distributed_apply_gradients_fn\n        distribution.extended.update(\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 1213, in apply_grad_to_update_var  **\n        return self._update_step(grad, var)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/optimizers/optimizer_experimental/optimizer.py\", line 216, in _update_step\n        raise KeyError(\n\n    KeyError: 'The optimizer cannot recognize variable conv_0/kernel:0. This usually means you are trying to call the optimizer to update different parts of the model separately. Please call `optimizer.build(variables)` with the full list of trainable variables before the training loop or use legacy optimizer `tf.keras.optimizers.legacy.{self.__class__.__name__}.'\n\n"}